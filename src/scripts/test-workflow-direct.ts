import 'dotenv/config';

/**
 * Script para probar el workflow de ChatKit directamente
 */
async function testWorkflowDirect() {
  console.log('üöÄ Iniciando prueba directa del workflow de ChatKit...\n');

  try {
    // 1. Verificar variables de entorno
    console.log('1Ô∏è‚É£ Verificando variables de entorno...');
    const workflowId = process.env.OPENAI_CHATKIT_WORKFLOW_ID;
    const apiKey = process.env.OPENAI_API_KEY;

    if (!workflowId) {
      throw new Error('‚ùå OPENAI_CHATKIT_WORKFLOW_ID no est√° configurado');
    }
    if (!apiKey) {
      throw new Error('‚ùå OPENAI_API_KEY no est√° configurado');
    }

    console.log(`‚úÖ Workflow ID: ${workflowId}`);
    console.log(`‚úÖ API Key: ${apiKey.substring(0, 10)}...`);

    // 2. Crear sesi√≥n de ChatKit
    console.log('\n2Ô∏è‚É£ Creando sesi√≥n de ChatKit...');
    const sessionResponse = await fetch('https://api.openai.com/v1/chatkit/sessions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'OpenAI-Beta': 'chatkit_beta=v1',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        workflow: {
          id: workflowId
        },
        user: 'test_user_direct'
      })
    });

    if (!sessionResponse.ok) {
      const error = await sessionResponse.text();
      throw new Error(`Error creando sesi√≥n: ${error}`);
    }

    const session = await sessionResponse.json() as any;
    console.log(`‚úÖ Sesi√≥n creada: ${session.id}`);
    console.log(`‚úÖ Client Secret: ${session.client_secret.substring(0, 20)}...`);

    // 3. Probar el workflow directamente con fetch
    console.log('\n3Ô∏è‚É£ Probando workflow directamente...');
    const messageResponse = await fetch('https://api.openai.com/v1/chatkit/sessions/messages', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'OpenAI-Beta': 'chatkit_beta=v1',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        session_id: session.id,
        messages: [
          {
            role: 'user',
            content: 'Hola, ¬øpuedes ayudarme con el sistema Movonte Dashboard?'
          }
        ]
      })
    });

    if (!messageResponse.ok) {
      const error = await messageResponse.text();
      console.log(`‚ö†Ô∏è Error en mensaje directo: ${error}`);
      console.log('Esto es normal - ChatKit maneja los mensajes internamente');
    } else {
      const messageResult = await messageResponse.json();
      console.log(`‚úÖ Respuesta directa:`, messageResult);
    }

    // 4. Verificar que la sesi√≥n est√© activa
    console.log('\n4Ô∏è‚É£ Verificando estado de la sesi√≥n...');
    const sessionInfoResponse = await fetch(`https://api.openai.com/v1/chatkit/sessions/${session.id}`, {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'OpenAI-Beta': 'chatkit_beta=v1'
      }
    });

    if (sessionInfoResponse.ok) {
      const sessionInfo = await sessionInfoResponse.json() as any;
      console.log(`‚úÖ Informaci√≥n de sesi√≥n:`, sessionInfo);
    } else {
      const error = await sessionInfoResponse.text();
      console.log(`‚ö†Ô∏è Error obteniendo informaci√≥n de sesi√≥n: ${error}`);
    }

    console.log('\nüéâ ¬°Prueba directa del workflow completada!');
    console.log('\nüìã Resultado:');
    console.log('‚úÖ Workflow ID configurado correctamente');
    console.log('‚úÖ Sesi√≥n de ChatKit creada exitosamente');
    console.log('‚úÖ Client Secret generado correctamente');
    console.log('‚úÖ El workflow est√° listo para usar en el frontend');

    console.log('\nüîß Para usar en el frontend:');
    console.log(`Client Secret: ${session.client_secret}`);
    console.log(`Session ID: ${session.id}`);

  } catch (error) {
    console.error('\n‚ùå Error durante la prueba directa:');
    console.error(error);
    process.exit(1);
  }
}

// Ejecutar la prueba
testWorkflowDirect();
