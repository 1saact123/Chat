import { Request, Response } from 'express';
import { OpenAI } from 'openai';
import { authenticateToken } from '../middleware/auth';

export class ChatKitController {
  private openai: OpenAI;

  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  }

  /**
   * Crear una nueva sesi√≥n de ChatKit
   */
  async createSession(req: Request, res: Response): Promise<void> {
    try {
      const { userId, username, email, role, userContext } = req.body;

      if (!userId || !username) {
        res.status(400).json({
          success: false,
          error: 'userId y username son requeridos'
        });
        return;
      }

      console.log('üîÑ Creando sesi√≥n de ChatKit para usuario:', username);

      // Crear sesi√≥n de ChatKit con OpenAI
      const session = await this.openai.chatkit.sessions.create({
        workflow: {
          id: process.env.OPENAI_CHATKIT_WORKFLOW_ID || 'wf_default'
        },
        user: {
          id: userId.toString(),
          name: username,
          email: email || '',
          metadata: {
            role: role || 'user',
            ...userContext
          }
        },
        // Configuraci√≥n adicional de la sesi√≥n
        settings: {
          // Personalizar comportamiento del chat
          systemMessage: `Eres un asistente de IA especializado en ayudar con tareas administrativas y de gesti√≥n. 
            El usuario ${username} est√° usando el sistema Movonte Dashboard. 
            Puedes ayudar con consultas sobre proyectos, usuarios, servicios, tickets y configuraciones del sistema.
            Responde de manera profesional y √∫til.`,
          // Configurar l√≠mites
          maxMessages: 100,
          // Configurar herramientas disponibles
          tools: ['search', 'file_upload', 'code_interpreter']
        }
      });

      console.log('‚úÖ Sesi√≥n de ChatKit creada exitosamente:', session.id);

      res.json({
        success: true,
        data: {
          client_secret: session.client_secret,
          session_id: session.id,
          expires_at: session.expires_at
        }
      });

    } catch (error) {
      console.error('‚ùå Error creando sesi√≥n de ChatKit:', error);
      
      res.status(500).json({
        success: false,
        error: 'Error interno del servidor al crear sesi√≥n de ChatKit'
      });
    }
  }

  /**
   * Refrescar una sesi√≥n existente de ChatKit
   */
  async refreshSession(req: Request, res: Response): Promise<void> {
    try {
      const { existingSecret, userId } = req.body;

      if (!existingSecret || !userId) {
        res.status(400).json({
          success: false,
          error: 'existingSecret y userId son requeridos'
        });
        return;
      }

      console.log('üîÑ Refrescando sesi√≥n de ChatKit para usuario:', userId);

      // Refrescar sesi√≥n de ChatKit
      const session = await this.openai.chatkit.sessions.refresh({
        client_secret: existingSecret
      });

      console.log('‚úÖ Sesi√≥n de ChatKit refrescada exitosamente');

      res.json({
        success: true,
        data: {
          client_secret: session.client_secret,
          session_id: session.id,
          expires_at: session.expires_at
        }
      });

    } catch (error) {
      console.error('‚ùå Error refrescando sesi√≥n de ChatKit:', error);
      
      res.status(500).json({
        success: false,
        error: 'Error interno del servidor al refrescar sesi√≥n de ChatKit'
      });
    }
  }

  /**
   * Obtener informaci√≥n de una sesi√≥n
   */
  async getSessionInfo(req: Request, res: Response): Promise<void> {
    try {
      const { sessionId } = req.params;

      if (!sessionId) {
        res.status(400).json({
          success: false,
          error: 'sessionId es requerido'
        });
        return;
      }

      console.log('üîÑ Obteniendo informaci√≥n de sesi√≥n:', sessionId);

      // Obtener informaci√≥n de la sesi√≥n
      const session = await this.openai.chatkit.sessions.retrieve(sessionId);

      res.json({
        success: true,
        data: {
          id: session.id,
          status: session.status,
          created_at: session.created_at,
          expires_at: session.expires_at,
          user: session.user
        }
      });

    } catch (error) {
      console.error('‚ùå Error obteniendo informaci√≥n de sesi√≥n:', error);
      
      res.status(500).json({
        success: false,
        error: 'Error interno del servidor al obtener informaci√≥n de sesi√≥n'
      });
    }
  }

  /**
   * Eliminar una sesi√≥n
   */
  async deleteSession(req: Request, res: Response): Promise<void> {
    try {
      const { sessionId } = req.params;

      if (!sessionId) {
        res.status(400).json({
          success: false,
          error: 'sessionId es requerido'
        });
        return;
      }

      console.log('üîÑ Eliminando sesi√≥n:', sessionId);

      // Eliminar sesi√≥n
      await this.openai.chatkit.sessions.delete(sessionId);

      console.log('‚úÖ Sesi√≥n eliminada exitosamente');

      res.json({
        success: true,
        message: 'Sesi√≥n eliminada exitosamente'
      });

    } catch (error) {
      console.error('‚ùå Error eliminando sesi√≥n:', error);
      
      res.status(500).json({
        success: false,
        error: 'Error interno del servidor al eliminar sesi√≥n'
      });
    }
  }

  /**
   * Obtener estad√≠sticas de uso de ChatKit
   */
  async getUsageStats(req: Request, res: Response): Promise<void> {
    try {
      const { userId } = req.query;

      console.log('üîÑ Obteniendo estad√≠sticas de uso para usuario:', userId);

      // Aqu√≠ podr√≠as implementar l√≥gica para obtener estad√≠sticas
      // Por ahora, devolvemos datos de ejemplo
      const stats = {
        totalSessions: 0,
        totalMessages: 0,
        lastActivity: null,
        averageSessionDuration: 0
      };

      res.json({
        success: true,
        data: stats
      });

    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas:', error);
      
      res.status(500).json({
        success: false,
        error: 'Error interno del servidor al obtener estad√≠sticas'
      });
    }
  }
}
