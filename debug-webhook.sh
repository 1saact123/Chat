#!/bin/bash

echo "üîç === DIAGN√ìSTICO DE WEBHOOKS DEL CHATBOT ===\n"

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# 1. Verificar que el servidor est√© ejecut√°ndose
echo -e "${BLUE}1Ô∏è‚É£ Verificando servidor Node.js...${NC}"
if pgrep -f "node.*app.js" > /dev/null; then
    echo -e "${GREEN}‚úÖ Servidor Node.js ejecut√°ndose${NC}"
    ps aux | grep "node.*app.js" | grep -v grep
else
    echo -e "${RED}‚ùå Servidor Node.js NO est√° ejecut√°ndose${NC}"
    exit 1
fi

# 2. Verificar puerto 3000
echo -e "\n${BLUE}2Ô∏è‚É£ Verificando puerto 3000...${NC}"
if netstat -tlnp | grep :3000 > /dev/null; then
    echo -e "${GREEN}‚úÖ Puerto 3000 est√° abierto${NC}"
    netstat -tlnp | grep :3000
else
    echo -e "${RED}‚ùå Puerto 3000 NO est√° abierto${NC}"
    exit 1
fi

# 3. Probar endpoint de webhook localmente
echo -e "\n${BLUE}3Ô∏è‚É£ Probando endpoint de webhook localmente...${NC}"
echo "üîó Probando http://localhost:3000/api/chatbot/webhook/jira..."

LOCAL_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/webhook_test_response.json http://localhost:3000/api/chatbot/webhook/jira)

if [ "$LOCAL_RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ Endpoint local responde correctamente${NC}"
    echo "Respuesta:"
    cat /tmp/webhook_test_response.json | jq '.' 2>/dev/null || cat /tmp/webhook_test_response.json
else
    echo -e "${RED}‚ùå Endpoint local NO responde correctamente (Status: $LOCAL_RESPONSE)${NC}"
    cat /tmp/webhook_test_response.json
fi

# 4. Probar endpoint externo
echo -e "\n${BLUE}4Ô∏è‚É£ Probando endpoint externo...${NC}"
echo "üîó Probando https://chat.movonte.com/api/chatbot/webhook/jira..."

EXTERNAL_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/webhook_external_response.json https://chat.movonte.com/api/chatbot/webhook/jira)

if [ "$EXTERNAL_RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ Endpoint externo responde correctamente${NC}"
else
    echo -e "${RED}‚ùå Endpoint externo NO responde correctamente (Status: $EXTERNAL_RESPONSE)${NC}"
    cat /tmp/webhook_external_response.json
fi

# 5. Verificar logs del servidor
echo -e "\n${BLUE}5Ô∏è‚É£ Verificando logs del servidor...${NC}"
echo "üìã √öltimas 10 l√≠neas de logs (si est√°n disponibles):"
if [ -f /var/log/syslog ]; then
    sudo tail -10 /var/log/syslog | grep -i "node\|webhook\|chatbot" || echo "No hay logs relevantes en syslog"
fi

# 6. Probar con un payload de prueba
echo -e "\n${BLUE}6Ô∏è‚É£ Probando con payload de Jira...${NC}"

TEST_PAYLOAD='{
  "webhookEvent": "comment_created",
  "comment": {
    "id": "999",
    "author": {
      "displayName": "Test User",
      "emailAddress": "test@example.com",
      "accountId": "test-account-id"
    },
    "body": "Test comment for chatbot",
    "created": "2025-08-28T16:32:16.202Z"
  },
  "issue": {
    "key": "BDM-61",
    "fields": {
      "summary": "Test Issue",
      "status": {
        "name": "Open"
      }
    }
  }
}'

echo "üì¶ Enviando payload de prueba..."
curl -s -X POST \
  -H "Content-Type: application/json" \
  -d "$TEST_PAYLOAD" \
  -w "%{http_code}" \
  -o /tmp/webhook_test_payload_response.json \
  http://localhost:3000/api/chatbot/webhook/jira

PAYLOAD_STATUS=$?
if [ $PAYLOAD_STATUS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Payload enviado correctamente${NC}"
    echo "Respuesta:"
    cat /tmp/webhook_test_payload_response.json | jq '.' 2>/dev/null || cat /tmp/webhook_test_payload_response.json
else
    echo -e "${RED}‚ùå Error enviando payload${NC}"
fi

# 7. Verificar variables de entorno
echo -e "\n${BLUE}7Ô∏è‚É£ Verificando variables de entorno cr√≠ticas...${NC}"
echo "üîë OPENAI_API_KEY: ${OPENAI_API_KEY:0:10}..."
echo "üîë JIRA_BASE_URL: $JIRA_BASE_URL"
echo "üîë JIRA_EMAIL: $JIRA_EMAIL"
echo "üîë JIRA_API_TOKEN: ${JIRA_API_TOKEN:0:10}..."

# 8. Verificar archivos compilados
echo -e "\n${BLUE}8Ô∏è‚É£ Verificando archivos compilados...${NC}"
if [ -f "dist/controllers/chatbot_controller.js" ]; then
    echo -e "${GREEN}‚úÖ Controller compilado existe${NC}"
else
    echo -e "${RED}‚ùå Controller compilado NO existe${NC}"
fi

if [ -f "dist/services/openAI_service.js" ]; then
    echo -e "${GREEN}‚úÖ OpenAI service compilado existe${NC}"
else
    echo -e "${RED}‚ùå OpenAI service compilado NO existe${NC}"
fi

# 9. Verificar dependencias
echo -e "\n${BLUE}9Ô∏è‚É£ Verificando dependencias...${NC}"
if [ -f "node_modules/openai/package.json" ]; then
    echo -e "${GREEN}‚úÖ OpenAI package instalado${NC}"
else
    echo -e "${RED}‚ùå OpenAI package NO instalado${NC}"
fi

# 10. Limpiar archivos temporales
rm -f /tmp/webhook_test_response.json /tmp/webhook_external_response.json /tmp/webhook_test_payload_response.json

echo -e "\n${BLUE}üìä RESUMEN DEL DIAGN√ìSTICO:${NC}"
echo "Si el endpoint local responde pero el externo no, el problema est√° en nginx."
echo "Si ambos responden pero no procesa webhooks, el problema est√° en el c√≥digo."
echo "Si hay errores de OpenAI, verifica la API key."
echo "Si hay errores de Jira, verifica las credenciales."

echo -e "\n${YELLOW}üí° PR√ìXIMOS PASOS:${NC}"
echo "1. Revisa los logs del servidor en tiempo real: tail -f /var/log/syslog"
echo "2. Si hay errores de OpenAI, actualiza la API key en .env"
echo "3. Si hay errores de Jira, verifica las credenciales"
echo "4. Si el problema persiste, ejecuta: npm run build && npm start"
