#!/bin/bash

echo "üîß === REINICIANDO SERVIDOR CON NUEVA CONFIGURACI√ìN ===\n"

# 1. Detener procesos existentes
echo "1Ô∏è‚É£ Deteniendo procesos existentes..."
if pgrep -f "node.*app.js" > /dev/null; then
    echo "üîÑ Proceso Node.js encontrado, deteniendo..."
    pkill -f "node.*app.js"
    sleep 2
    echo "‚úÖ Proceso detenido"
else
    echo "‚ÑπÔ∏è  No hay procesos Node.js ejecut√°ndose"
fi

# 2. Verificar que el puerto 3000 est√© libre
echo -e "\n2Ô∏è‚É£ Verificando puerto 3000..."
if netstat -tlnp | grep :3000 > /dev/null; then
    echo "‚ö†Ô∏è  Puerto 3000 a√∫n en uso, forzando liberaci√≥n..."
    sudo fuser -k 3000/tcp
    sleep 2
fi

# 3. Compilar TypeScript
echo -e "\n3Ô∏è‚É£ Compilando TypeScript..."
npx tsc
if [ $? -eq 0 ]; then
    echo "‚úÖ Compilaci√≥n exitosa"
else
    echo "‚ùå Error en la compilaci√≥n"
    exit 1
fi

# 4. Iniciar el servidor con nueva configuraci√≥n
echo -e "\n4Ô∏è‚É£ Iniciando servidor con nueva configuraci√≥n..."
echo "üöÄ Configuraci√≥n: Escuchando en 0.0.0.0:3000 (todas las interfaces)"
npm start &

# 5. Esperar que el servidor se inicie
echo -e "\n5Ô∏è‚É£ Esperando que el servidor se inicie..."
sleep 5

# 6. Verificar que el servidor est√© ejecut√°ndose
echo -e "\n6Ô∏è‚É£ Verificando que el servidor est√© ejecut√°ndose..."
if pgrep -f "node.*app.js" > /dev/null; then
    echo "‚úÖ Servidor ejecut√°ndose correctamente"
    ps aux | grep "node.*app.js" | grep -v grep
else
    echo "‚ùå El servidor no se inici√≥ correctamente"
    exit 1
fi

# 7. Verificar que el puerto 3000 est√© abierto
echo -e "\n7Ô∏è‚É£ Verificando puerto 3000..."
if netstat -tlnp | grep :3000 > /dev/null; then
    echo "‚úÖ Puerto 3000 est√° abierto"
    netstat -tlnp | grep :3000
else
    echo "‚ùå Puerto 3000 NO est√° abierto"
    exit 1
fi

# 8. Probar conectividad local
echo -e "\n8Ô∏è‚É£ Probando conectividad local..."
echo "üîó Probando http://localhost:3000/api/webhook/jira..."
LOCAL_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/webhook/jira)
if [ "$LOCAL_STATUS" = "200" ]; then
    echo "‚úÖ Localhost:3000 responde correctamente"
else
    echo "‚ùå Localhost:3000 NO responde correctamente (Status: $LOCAL_STATUS)"
fi

# 9. Probar conectividad externa
echo -e "\n9Ô∏è‚É£ Probando conectividad externa..."
echo "üîó Probando https://chat.movonte.com/api/webhook/jira..."
EXTERNAL_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://chat.movonte.com/api/webhook/jira)
if [ "$EXTERNAL_STATUS" = "200" ]; then
    echo "‚úÖ HTTPS externo responde correctamente"
else
    echo "‚ùå HTTPS externo NO responde correctamente (Status: $EXTERNAL_STATUS)"
fi

echo -e "\nüéâ SERVIDOR REINICIADO CON NUEVA CONFIGURACI√ìN"
echo "üìã Cambios aplicados:"
echo "   - Servidor ahora escucha en 0.0.0.0:3000 (todas las interfaces)"
echo "   - nginx puede hacer proxy correctamente"
echo "   - Webhooks de Jira deber√≠an llegar ahora"
echo -e "\nüìã Pr√≥ximos pasos:"
echo "   1. P√≠dele a Hern√°n que haga un comentario en Jira"
echo "   2. Verifica los logs del servidor"
echo "   3. Confirma que el webhook llega correctamente"
